# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages

def update_damages(damages):
    conversion = {"M": 1000000,
                  "B": 1000000000}
    updated_damages = []
    
    for damage in damages:
      if damage == "Damages not recorded":
        updated_damages.append(damage)
      elif damage[-1] in conversion.keys():
        updated_damages.append(float(damage[:-1]) * conversion[damage[-1]])
  
    return updated_damages

updated_damages = update_damages(damages)
#print(updated_damages)

# 2 
# Create and view the hurricanes dictionary

dict_hurricanes = {}

def create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths):
    
  for hurricane in range(len(names)):
    dict_hurricanes[names[hurricane]] = {
      "Name": names[hurricane],
      "Month": months[hurricane],
      "Year": years[hurricane],
      "Max Sustained Wind": max_sustained_winds[hurricane],
      "Areas Affected": areas_affected[hurricane],
      "Damage": updated_damages[hurricane],
      "Death": deaths[hurricane]
      }

  return dict_hurricanes

dict_hurricanes = create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
#print(dict_hurricanes)

# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key

dict_hurricanes_by_year = []

def create_dictionary_by_year(year):
  
  for name in dict_hurricanes:
    if dict_hurricanes[name]["Year"] == year:
      dict_hurricanes_by_year.append(dict_hurricanes[name])
  
  return dict_hurricanes_by_year

#print(create_dictionary_by_year(1932))

# 4
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in

damaged_areas = {}

def count_damaged_areas(areas_affected):

  for areas in areas_affected:
    for area in areas:
      if area not in damaged_areas:
        damaged_areas[area] = 1
      else:
        damaged_areas[area] += 1
  
  return damaged_areas

damaged_areas = count_damaged_areas(areas_affected)
#print(damaged_areas)

# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in
def most_affected_area(damaged_areas):
  most_affected_area = " "
  max_area_count = 0

  for area in damaged_areas:
    if max_area_count < damaged_areas[area]:
      most_affected_area = area
      max_area_count = damaged_areas[area]
  
  print(f"The area affected by the most hurricanes is {most_affected_area}. It was hit {max_area_count} times.")
  
#most_affected_area(damaged_areas) 
  

# 6
# Calculating the Deadliest Hurricane

# find highest mortality hurricane and the number of deaths
def deadliest_hurricane(dict_hurricanes):
  name_death_hurricane = " "
  num_of_deaths = 0

  for hurricane in dict_hurricanes.values():
    if num_of_deaths < hurricane["Death"]:
      num_of_deaths = hurricane["Death"]
      name_death_hurricane = hurricane["Name"]
  
  print(f"The highest mortality hurricane is {name_death_hurricane}. Number of deaths: {num_of_deaths}")

#deadliest_hurricane(dict_hurricanes)
    

# 7
# Rating Hurricanes by Mortality


# categorize hurricanes in new dictionary with mortality severity as key

def sorted_by_mortality(dict_hurricanes):
  mortality_scale = {0: 0,
                    1: 100,
                    2: 500,
                    3: 1000,
                    4: 10000}
  hurricane_mortality = {0: [],
                         1: [],
                         2: [],
                         3: [],
                         4: [],
                         5: []}
      
  for hurricane in dict_hurricanes.values():
    
    if hurricane["Death"] <= 100:
      hurricane_mortality[1].append(hurricane)
    elif hurricane["Death"] > 100 and hurricane["Death"] <= 500:
      hurricane_mortality[2].append(hurricane)
    elif hurricane["Death"] > 500 and hurricane["Death"] <= 1000:
      hurricane_mortality[3].append(hurricane) 
    elif hurricane["Death"] > 1000 and hurricane["Death"] <= 10000:
      hurricane_mortality[4].append(hurricane)
    else:
      hurricane_mortality[5].append(hurricane)

  return hurricane_mortality

hurricane_mortality = sorted_by_mortality(dict_hurricanes)
#print(hurricane_mortality)

# 8 Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost

def max_damage_hurricane(dict_hurricanes, updated_damages):
  name_damage_hurricane = " "
  cost_damage = 0

  for hurricane in dict_hurricanes.values():
    if hurricane["Damage"] == "Damages not recorded":
      hurricane["Damage"] = 0
  
  for hurricane in dict_hurricanes.values():
    if cost_damage < hurricane["Damage"]:
      cost_damage = hurricane["Damage"]
      name_damage_hurricane = hurricane["Name"]
  
  print(f"The hurricane that caused the greatest damage is {name_damage_hurricane}. Damage: {cost_damage}")

#max_damage_hurricane(dict_hurricanes, updated_damages)

# 9
# Rating Hurricanes by Damage
  
# categorize hurricanes in new dictionary with damage severity as key

def sorted_by_damage(dict_hurricanes):  
  damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  hurricane_damage = {0: [],
                    1: [],
                    2: [],
                    3: [],
                    4: [],
                    5: []}
      
  for hurricane in dict_hurricanes.values():
    if hurricane["Damage"] == "Damages not recorded":
      hurricane_damage[0].append(hurricane)
      hurricane["Damage"] = 0 

  for hurricane in dict_hurricanes.values():
    
    if hurricane["Damage"] > 0 and hurricane["Damage"] <= 100000000:
      hurricane_damage[1].append(hurricane)
    elif hurricane["Damage"] > 100000000 and hurricane["Damage"] <= 1000000000:
      hurricane_damage[2].append(hurricane)
    elif hurricane["Damage"] > 1000000000 and hurricane["Damage"] <= 10000000000:
      hurricane_damage[3].append(hurricane) 
    elif hurricane["Damage"] > 10000000000 and hurricane["Damage"] <= 50000000000:
      hurricane_damage[4].append(hurricane)
    else:
      hurricane_damage[5].append(hurricane)

  for hurricane in dict_hurricanes.values():
    if hurricane["Damage"] == 0:
      hurricane["Damage"] = "Damages not recorded"
  

  return hurricane_damage

hurricane_damage = sorted_by_damage(dict_hurricanes)
#print(hurricane_damage)
